"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5937],{7774:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"bs","title":"bs","description":"What is a NavMesh?","source":"@site/docs/bs.mdx","sourceDirName":".","slug":"/bs","permalink":"/SpiteDocs/docs/bs","draft":false,"unlisted":false,"editUrl":"https://github.com/Envy-Spite-Team/SpiteDocs/docs/bs.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Tutorial Intro","permalink":"/SpiteDocs/docs/intro"},"next":{"title":"Editor Setup","permalink":"/SpiteDocs/docs/Setup/Editor Setup"}}');var s=o(4848),a=o(8453);const i={},r=void 0,d={},l=[{value:"What is a NavMesh?",id:"what-is-a-navmesh",level:2},{value:"Creating a NavMesh",id:"creating-a-navmesh",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"what-is-a-navmesh",children:"What is a NavMesh?"}),"\n",(0,s.jsx)(n.p,{children:"For enemies to walk, they need a ground to do so. However they need to be told what is and isn't ground, and this is where navmeshes come into play. They are used for navigation and mark the ground that is walkable for them. You may have heard of them if you messed around in the Sandbox or played Garry's mod."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"[!TIP]Most enemies use a NavMesh but some don't:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Hideous Masses and Idols for example do not need one as they are stationary. Flying enemies like Virtues and Drones don't need one either, as they use collision of walls, floors and other geometry.\nYou should also mark your floors and ceilings as ",(0,s.jsx)(n.code,{children:"Floor"}),", your walls as ",(0,s.jsx)(n.code,{children:"Walls"})," and overall put them in the ",(0,s.jsx)(n.code,{children:"Environment"})," layer, otherwise it will be slippery and you wont be able to slide on it."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"![[Pasted image 20250618114225.png]]"}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-navmesh",children:"Creating a NavMesh"}),"\n",(0,s.jsxs)(n.p,{children:["The way navigation and navmeshes are made has been changed recently as of the ULTRA_REVAMP update. Now, you will need an empty object not parented to anything named ",(0,s.jsx)(n.code,{children:"Navigation"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"![[Pasted image 20250618113814.png]]"}),"\n",(0,s.jsxs)(n.p,{children:["This object will need the component ",(0,s.jsx)(n.code,{children:"NavMeshSurface"}),". However, before we do anything assign the ",(0,s.jsx)(n.code,{children:"NavMeshModifier"})," component to any floor you want your enemies to walk on. Then, go back to the ",(0,s.jsx)(n.code,{children:"NavMeshSurface"})," component in your ",(0,s.jsx)(n.code,{children:"Navigation"}),", open ",(0,s.jsx)(n.code,{children:"Object Collection"})," and change ",(0,s.jsx)(n.code,{children:"Collect Objects"})," to ",(0,s.jsx)(n.code,{children:"NavMeshModifier Component Only"}),". After you do this, click ",(0,s.jsx)(n.code,{children:"Bake"}),". This may take a while."]}),"\n",(0,s.jsx)(n.p,{children:"![[Pasted image 20250618114534.png]]"}),"\n",(0,s.jsx)(n.p,{children:"Congratulations! You have a (hopefully) working NavMesh!"}),"\n",(0,s.jsx)(n.p,{children:"TODO:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"find out why i cant bake it again. should i remove it and add it back?"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>r});var t=o(6540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);