"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4766],{3882:(e,t,s)=>{s.d(t,{A:()=>l});const l=s.p+"assets/images/ItemPlaceZone-4df1236271d07ed496f641c1f87012be.png"},6026:(e,t,s)=>{s.d(t,{A:()=>l});const l=s.p+"assets/images/RedAltarHierarchy-3b8e1d20efb4d12e174bf6cee20e2f0a.png"},7423:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"Advanced Tutorials/Skulls And Buttons","title":"Skulls and Buttons","description":"Skulls are basically the keys of ULTRAKILL. You use them to open doors, activate events, things of that sort. This tutorial will tell you how to set up and use skulls in your own levels, as well as creating buttons for similar purposes.","source":"@site/docs/Advanced Tutorials/Skulls And Buttons.mdx","sourceDirName":"Advanced Tutorials","slug":"/Advanced Tutorials/Skulls And Buttons","permalink":"/SpiteDocs/docs/Advanced Tutorials/Skulls And Buttons","draft":false,"unlisted":false,"editUrl":"https://github.com/Envy-Spite-Team/SpiteDocs/docs/Advanced Tutorials/Skulls And Buttons.mdx","tags":[],"version":"current","frontMatter":{"title":"Skulls and Buttons"},"sidebar":"tutorialSidebar","previous":{"title":"Information","permalink":"/SpiteDocs/docs/Advanced Tutorials/Information"},"next":{"title":"Advanced Arenas","permalink":"/SpiteDocs/docs/Advanced Tutorials/Advanced Arenas"}}');var n=s(4848),a=s(8453);const o={title:"Skulls and Buttons"},i="Intro",r={},c=[{value:"Skulls and Altars",id:"skulls-and-altars",level:2},{value:"Buttons",id:"buttons",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"intro",children:"Intro"})}),"\n",(0,n.jsx)(t.p,{children:"Skulls are basically the keys of ULTRAKILL. You use them to open doors, activate events, things of that sort. This tutorial will tell you how to set up and use skulls in your own levels, as well as creating buttons for similar purposes."}),"\n",(0,n.jsx)(t.h2,{id:"skulls-and-altars",children:"Skulls and Altars"}),"\n",(0,n.jsxs)(t.p,{children:["All of the altars are located in ",(0,n.jsx)(t.code,{children:"ULTRAKILL Assets/Prefabs/Levels/Interactive"}),", right at the top of the list. For this, we'll pick a red skull altar. 2 of them, actually. One with the skull, and one for the skull to be placed on. Once you bring the prefabs into your scene, their innards should look something like this:"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Two red skull altars in the hierarchy",src:s(6026).A+"",width:"297",height:"166"})}),"\n",(0,n.jsx)(t.p,{children:"Let's go through these items step by step."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Cube"})," is the spot where the skulls, or any item, get placed. Inside it is a script called ",(0,n.jsx)(t.code,{children:"ItemPlaceZone"}),", which we will talk about in a moment."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"SkullRed"})," is, obviously, the red skull. It turns on and off based on whether or not the skull has been placed there. It's got a script called ",(0,n.jsx)(t.code,{children:"ItemIdentifier"}),", giving details about how it is as a held item, as well as events for when the item is picked up or put down."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"DirectionIndicator"})," is just... there. It's an empty ",(0,n.jsx)(t.code,{children:"GameObject"})," in front of the altar. It's unclear what the actual purpose for it is, as none of the other objects use it in any way. If we figure out what it does, this page will be updated accordingly. For now, just ignore it and pretend it isn't there."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Altars"})," is a container for all the altars. It contains the torch, blue and red skull altars. Unless you for some reason want to go through the effort of manually changing the type of altar it is, don't touch this."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["If you're just making a level, ",(0,n.jsx)(t.code,{children:"Cube"})," and ",(0,n.jsx)(t.code,{children:"SkullRed"})," (or ",(0,n.jsx)(t.code,{children:"SkullBlue"})," if you have the blue altar) are all you really need to worry about. If it's enabled, the altar will start with having the skull placed on it. Likewise, if it's disabled, it'll be an empty altar. If we want the altar to actually do things when you take/place the skull, head over to ",(0,n.jsx)(t.code,{children:"Cube"}),", and look at ",(0,n.jsx)(t.code,{children:"ItemPlaceZone"}),"."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"The ItemPlaceZone component",src:s(3882).A+"",width:"354",height:"386"})}),"\n",(0,n.jsx)(t.p,{children:"There are quite a few lists here, so let's just go over the ones you'll actually use."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Activate On Success"})," is a ",(0,n.jsx)(t.code,{children:"GameObject"})," list, of which it will activate all of the objects in the list when the right item is placed on the altar. Plus, it'll automatically disable these objects when the item is taken back."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Deactivate On Success"})," is the same as the above ",(0,n.jsx)(t.code,{children:"Activate On Success"}),", but it'll disable the listed objects when the item is placed, and enable them when it's taken back."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Activate On Failure"})," is the same as the above ",(0,n.jsx)(t.code,{children:"Activate On Success"}),", but it only activates/deactivates the objects when the WRONG item is placed/taken. For example, you could use this to play an error sound effect if the player places a red skull on a blue altar, or a blue skull on a torch altar."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Doors"})," is actually (slightly) different than the above. It is a ",(0,n.jsx)(t.code,{children:"Door"})," list, and will open all of the doors in the list when the correct item is placed. It will also close them if it's taken back."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Since ",(0,n.jsx)(t.code,{children:"Reverse Doors"}),", ",(0,n.jsx)(t.code,{children:"Arena Statuses"})," and ",(0,n.jsx)(t.code,{children:"Reverse Arena Statuses"})," are less clear to figure out what they do, it's better to use an ",(0,n.jsx)(t.code,{children:"ObjectActivator"})," connected to the properly covered lists if you want to activate arenas or lock doors."]}),"\n",(0,n.jsx)(t.p,{children:"Feel free to use these to open your doors, create special areas, spawn enemies as a trap, whatever you want!"}),"\n",(0,n.jsx)(t.h2,{id:"buttons",children:"Buttons"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"WORK IN PROGRESS"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>i});var l=s(6540);const n={},a=l.createContext(n);function o(e){const t=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),l.createElement(a.Provider,{value:t},e.children)}}}]);